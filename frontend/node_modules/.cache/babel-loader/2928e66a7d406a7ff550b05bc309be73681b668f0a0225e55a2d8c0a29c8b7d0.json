{"ast":null,"code":"export async function encryptText(plaintext, key) {\n  try {\n    const response = await fetch(\"http://localhost:5000/encrypt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        plaintext,\n        key\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(\"Error calling encryption API:\", error);\n    return {\n      error: \"Encryption failed\"\n    };\n  }\n}\nexport async function decryptText(ciphertext, key) {\n  try {\n    const response = await fetch(\"http://localhost:5000/decrypt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ciphertext,\n        key\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(\"Error calling decryption API:\", error);\n    return {\n      error: \"Decryption failed\"\n    };\n  }\n}","map":{"version":3,"names":["encryptText","plaintext","key","response","fetch","method","headers","body","JSON","stringify","json","error","console","decryptText","ciphertext"],"sources":["C:/Users/shail/OneDrive - Amity University/My Storage Area/Small Projects/caesar-cipher-web/frontend/src/api.js"],"sourcesContent":["export async function encryptText(plaintext, key) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/encrypt\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ plaintext, key })\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error calling encryption API:\", error);\r\n    return { error: \"Encryption failed\" };\r\n  }\r\n}\r\n\r\nexport async function decryptText(ciphertext, key) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/decrypt\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ ciphertext, key })\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error calling decryption API:\", error);\r\n    return { error: \"Decryption failed\" };\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,WAAWA,CAACC,SAAS,EAAEC,GAAG,EAAE;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,SAAS;QAAEC;MAAI,CAAC;IACzC,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MAAEA,KAAK,EAAE;IAAoB,CAAC;EACvC;AACF;AAEA,OAAO,eAAeE,WAAWA,CAACC,UAAU,EAAEZ,GAAG,EAAE;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEK,UAAU;QAAEZ;MAAI,CAAC;IAC1C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MAAEA,KAAK,EAAE;IAAoB,CAAC;EACvC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}